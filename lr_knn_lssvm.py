# -*- coding: utf-8 -*-
"""lr_knn_lssvm.ipynb

Automatically generated by Colaboratory.

"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from datetime import datetime
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("pvm_f.csv")
df.head()
df.info()
df.describe()

target_variable = 'new pmv'

features = ['TD', 'RH', 'Tw', 'WBGT', 'clo', 'met', 'air velocity', 'temp deviation', 'met derived', '25-Rh', 'wbgt deviation', 'upper part of fraction', 'lower part of fraction', 'inside =((upper/lower)*airvelocity)']

df['Time'] = pd.to_datetime(df['Time']).astype(int) // 10**9
X = df[features]
y = df[target_variable]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#linear regression
from sklearn.linear_model import LinearRegression

linear_regression_model = LinearRegression()
linear_regression_model.fit(X_train_scaled, y_train)
y_pred = linear_regression_model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

#evaluation for linear regression
print("Mean Squared Error: ",mse)
print("R-squared: ",r2)
print("Root Mean Squared Error: ",rmse)
print("Mean Absolute Error: ",mae)

results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
pd.set_option('display.max_rows', None)
print(results_df)

#KNN
from sklearn.neighbors import KNeighborsRegressor


knn_model = KNeighborsRegressor(n_neighbors=5)
knn_model.fit(X_train_scaled, y_train)
y_pred_knn = knn_model.predict(X_test_scaled)

mse_knn = mean_squared_error(y_test, y_pred_knn)
rmse_knn = np.sqrt(mse_knn)
r2_knn = r2_score(y_test, y_pred_knn)
mae_knn = mean_absolute_error(y_test, y_pred_knn)

#evaluation for KNN
print("KNN Regression Evaluation:")
print("Mean Squared Error: ", mse_knn)
print("Root Mean Squared Error: ", rmse_knn)
print("R-squared: ", r2_knn)
print("Mean Absolute Error: ", mae_knn)

results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_knn})
pd.set_option('display.max_rows', None)
print(results_df)

#LS-SVM
from sklearn.svm import LinearSVR

ls_svm_model = LinearSVR(epsilon=0.0, C=1.0)
ls_svm_model.fit(X_train_scaled, y_train)
y_pred_ls_svm = ls_svm_model.predict(X_test_scaled)


mse_ls_svm = mean_squared_error(y_test, y_pred_ls_svm)
rmse_ls_svm = np.sqrt(mse_ls_svm)
r2_ls_svm = r2_score(y_test, y_pred_ls_svm)
mae_ls_svm = mean_absolute_error(y_test, y_pred_ls_svm)

#evaluation for LS-SVM
print("\nLS-SVM Regression Evaluation:")
print("Mean Squared Error: ", mse_ls_svm)
print("Root Mean Squared Error: ", rmse_ls_svm)
print("R-squared: ", r2_ls_svm)
print("Mean Absolute Error: ", mae_ls_svm)

results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_ls_svm})
pd.set_option('display.max_rows', None)
print(results_df)