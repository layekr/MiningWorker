# -*- coding: utf-8 -*-
"""svm_pvm

Automatically generated by Colaboratory.

"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from datetime import datetime
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("pvm_f.csv")

df.head()

df.info()
df.describe()

target_variable = 'new pmv'
features = ['Time', 'TD', 'RH', 'Tw', 'WBGT', 'clo', 'met', 'air velocity', 'temp deviation', 'met derived', '25-Rh', 'wbgt deviation', 'upper part of fraction', 'lower part of fraction', 'inside =((upper/lower)*airvelocity)']

# Convert the 'Time' feature to a numerical representation
df['Time'] = pd.to_datetime(df['Time']).astype(int) // 10**9


X = df[features]
y = df[target_variable]

#Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,random_state=0)

#scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create an SVM regression model
svm_model = SVR(kernel='linear', C=1.0)


svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
print("Mean Squared Error: ",mse)
print("R-squared: ",r2)
print("Root Mean Squared Error: ",rmse)
print("Mean Absolute Error: ",mae)

# threshold = 0.08
# correct_predictions = sum(abs(y_test - y_pred) < threshold)
# total_predictions = len(y_test)
# accuracy = correct_predictions / total_predictions
# print("Accuracy: ",accuracy)

plt.scatter(y_test, y_pred)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs. Predicted Values for 'new pmv'")
plt.show()

results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
pd.set_option('display.max_rows', None)
print(results_df)